# EJERCICIO:
# - Muestra ejemplos de creaci√≥n de todas las estructuras soportadas por defecto en tu lenguaje.
# - Utiliza operaciones de inserci√≥n, borrado, actualizaci√≥n y ordenaci√≥n.
# 1. Listas (arrays mutables ordenados)
print("\n--- LISTAS ---")
lista = [1, 2, 3, 4, 5]
print("Lista original:", lista)

# Inserci√≥n
lista.append(6)  # Al final
lista.insert(0, 0)  # En posici√≥n espec√≠fica
print("Despu√©s de insertar:", lista)

# Actualizaci√≥n
lista[2] = 20
print("Despu√©s de actualizar:", lista)

# Borrado
del lista[0]  # Por √≠ndice
lista.remove(6)  # Por valor
ultimo = lista.pop()  # Elimina y retorna el √∫ltimo elemento
print("Despu√©s de borrar:", lista)

# Ordenaci√≥n
lista.sort(reverse=True)  # Descendente
print("Lista ordenada descendente:", lista)

# 2. Tuplas (inmutables)
print("\n--- TUPLAS ---")
tupla = (1, 2, 3, 4, 5)
print("Tupla:", tupla)
# No se pueden modificar, pero se pueden concatenar
nueva_tupla = tupla + (6, 7)
print("Nueva tupla:", nueva_tupla)

# 3. Conjuntos (sets - elementos √∫nicos no ordenados)
print("\n--- CONJUNTOS ---")
conjunto = {1, 2, 3, 4, 5}
print("Conjunto original:", conjunto)

# Inserci√≥n
conjunto.add(6)
print("Despu√©s de a√±adir:", conjunto)

# Borrado
conjunto.remove(6)
print("Despu√©s de borrar:", conjunto)

# Operaciones de conjunto
otro_conjunto = {4, 5, 6, 7}
print("Uni√≥n:", conjunto.union(otro_conjunto))
print("Intersecci√≥n:", conjunto.intersection(otro_conjunto))

# 4. Diccionarios (pares clave-valor)
print("\n--- DICCIONARIOS ---")
diccionario = {
    "nombre": "Juan",
    "edad": 25,
    "ciudad": "Madrid"
}
print("Diccionario original:", diccionario)

# Inserci√≥n
diccionario["profesion"] = "Programador"
print("Despu√©s de insertar:", diccionario)

# Actualizaci√≥n
diccionario["edad"] = 26
print("Despu√©s de actualizar:", diccionario)

# Borrado
del diccionario["ciudad"]
print("Despu√©s de borrar:", diccionario)

# 5. String (inmutable)
print("\n--- STRINGS ---")
texto = "Python"
print("String original:", texto)

# Operaciones con strings
nuevo_texto = texto.replace("n", "n!")
print("Despu√©s de reemplazar:", nuevo_texto)
print("May√∫sculas:", texto.upper())
print("Substring:", texto[1:4])

# DIFICULTAD EXTRA (opcional):
# Crea una agenda de contactos por terminal.
# - Debes implementar funcionalidades de b√∫squeda, inserci√≥n, actualizaci√≥n y eliminaci√≥n de ntactos.
# - Cada contacto debe tener un nombre y un n√∫mero de tel√©fono.
# - El programa solicita en primer lugar cu√°l es la operaci√≥n que se quiere realizar, y a ntinuaci√≥n
#   los datos necesarios para llevarla a cabo.
# - El programa no puede dejar introducir n√∫meros de tel√©fono no n√∫mericos y con m√°s de 11 gitos.
#   (o el n√∫mero de d√≠gitos que quieras)
# - Tambi√©n se debe proponer una operaci√≥n de finalizaci√≥n del programa.
def validar_telefono(telefono):
    """Valida que el tel√©fono sea num√©rico y tenga m√°ximo 11 d√≠gitos"""
    return telefono.isdigit() and len(telefono) <= 11

def buscar_contacto(agenda, nombre):
    """Busca un contacto por nombre"""
    nombre = nombre.lower()
    return next((contacto for contacto in agenda if contacto["nombre"].lower() == nombre), None)

def mostrar_menu():
    """Muestra el men√∫ de opciones"""
    print("\n=== AGENDA DE CONTACTOS ===")
    print("1. A√±adir contacto")
    print("2. Buscar contacto")
    print("3. Actualizar contacto")
    print("4. Eliminar contacto")
    print("5. Mostrar todos los contactos")
    print("6. Salir")
    return input("Seleccione una opci√≥n: ")

def main():
    agenda = []
    
    while True:
        opcion = mostrar_menu()
        
        if opcion == "1":  # A√±adir contacto
            nombre = input("Nombre: ")
            telefono = input("Tel√©fono: ")
            
            if not validar_telefono(telefono):
                print("‚ùå Tel√©fono inv√°lido. Debe ser num√©rico y tener m√°ximo 11 d√≠gitos.")
                continue
                
            if buscar_contacto(agenda, nombre):
                print("‚ùå Ya existe un contacto con ese nombre.")
                continue
                
            agenda.append({"nombre": nombre, "telefono": telefono})
            print("‚úÖ Contacto a√±adido correctamente.")
            
        elif opcion == "2":  # Buscar contacto
            nombre = input("Nombre a buscar: ")
            contacto = buscar_contacto(agenda, nombre)
            
            if contacto:
                print(f"üìû Nombre: {contacto['nombre']}, Tel√©fono: {contacto['telefono']}")
            else:
                print("‚ùå Contacto no encontrado.")
                
        elif opcion == "3":  # Actualizar contacto
            nombre = input("Nombre del contacto a actualizar: ")
            contacto = buscar_contacto(agenda, nombre)
            
            if contacto:
                nuevo_telefono = input("Nuevo tel√©fono: ")
                if validar_telefono(nuevo_telefono):
                    contacto["telefono"] = nuevo_telefono
                    print("‚úÖ Contacto actualizado correctamente.")
                else:
                    print("‚ùå Tel√©fono inv√°lido. Debe ser num√©rico y tener m√°ximo 11 d√≠gitos.")
            else:
                print("‚ùå Contacto no encontrado.")
                
        elif opcion == "4":  # Eliminar contacto
            nombre = input("Nombre del contacto a eliminar: ")
            contacto = buscar_contacto(agenda, nombre)
            
            if contacto:
                agenda.remove(contacto)
                print("‚úÖ Contacto eliminado correctamente.")
            else:
                print("‚ùå Contacto no encontrado.")
                
        elif opcion == "5":  # Mostrar todos los contactos
            if agenda:
                print("\n=== LISTA DE CONTACTOS ===")
                for contacto in agenda:
                    print(f"üìû {contacto['nombre']}: {contacto['telefono']}")
            else:
                print("üìù La agenda est√° vac√≠a.")
                
        elif opcion == "6":  # Salir
            print("üëã ¬°Hasta luego!")
            break
            
        else:
            print("‚ùå Opci√≥n inv√°lida. Por favor, seleccione una opci√≥n v√°lida.")

if __name__ == "__main__":
    main()